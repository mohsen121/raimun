using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Raimun.Api.Configurations;
using Raimun.Core.Common.Models;
using Raimun.Core.Common.Models.UserModels;
using Raimun.Core.Users.Commands.CreateUser;
using Raimun.Domain.Entities;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace Raimun.Api.Controllers
{
    public class UserController : BaseController
    {
        private JwtConfig _jwtConfig;
        private UserManager<User> _userManager;

        public UserController(IOptionsMonitor<JwtConfig> optionsMonitor, UserManager<User> userManager)
        {
            _jwtConfig = optionsMonitor.CurrentValue;
            _userManager = userManager;
        }
        [HttpPost("signUp")]
        [AllowAnonymous]
        public async Task<ApiResponse<UserCreateModel>> SignUp([FromBody] CreateUserCommand command)
        {
            return ApiResponse<UserCreateModel>.GetSuccessResponse(await Mediator.Send(command));
        }

        [HttpPost("signIn")]
        [AllowAnonymous]
        public async Task<IActionResult> SignIn([FromBody] UserSignInRequestModel model)
        {
            var respose = new ApiResponse<UserSignInResponseModel>();
            if (ModelState.IsValid)
            {
                // check if the user with the same username exist
                var existingUser = await _userManager.FindByNameAsync(model.UserName);

                if (existingUser != null)
                {
                    var isCorrect = await _userManager.CheckPasswordAsync(existingUser, model.Password);

                    if (isCorrect)
                    {
                        var jwtToken = GenerateJwtToken(existingUser);

                        return Ok(ApiResponse<UserSignInResponseModel>.GetSuccessResponse(new UserSignInResponseModel
                        {
                            Id = existingUser.Id,
                            FirstName = existingUser.FirstName,
                            LastName = existingUser.LastName,
                            UserName = existingUser.UserName,
                            JWT = jwtToken
                        }));
                    }
                }
            }

            respose.StatusCode = 400;
            respose.Message = "Invalid login reauest";

            return BadRequest(respose);
        }

        private string GenerateJwtToken(User user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(_jwtConfig.Secret);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.UniqueName, user.UserName),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddDays(7),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }
    }
}
